const {
  Reservation,
  Menu_Reservation,
  User,
  Account,
  Table_Reservation,
  Service_Reservation,
} = require("../models");
const db = require("../models/index");
const { Op } = require("sequelize");
const nodemailer = require("nodemailer");
const moment = require("moment");

async function remindUnpaidReservationByEmail() {
  try {
    const date = moment().format("YYYY-MM-DD HH:mm:ss");
    let reservations = await Reservation.findAll({
      where: {
        status: -2, //ch∆∞a thanh to√°n
        [Op.not]: [{ preFee: 0 }],
        createAt: {
          [Op.lt]: moment().subtract(30, "minutes"),
        },
      },
      include: [{ model: User, include: [{ model: Account }] }],
      raw: true,
    });
    for (let reservation of reservations) {
      let email = reservation["User.Account.email"];
      let name = reservation["User.userName"];
      let schedule = new Date(reservation.schedule);
      let year = schedule.getFullYear();
      let month = String(schedule.getMonth() + 1).padStart(2, "0");
      let day = String(schedule.getDate()).padStart(2, "0");
      let hour = String(schedule.getHours()).padStart(2, "0");
      let min = String(schedule.getMinutes()).padStart(2, "0");
      schedule =
        hour +
        " gi·ªù " +
        min +
        " ph√∫t, ng√†y " +
        day +
        " th√°ng " +
        month +
        " nƒÉm " +
        year;
      let createAt = new Date(reservation.createAt);
      let deadline = new Date(createAt.getTime() - 30 * 60 * 1000);
      year = createAt.getFullYear();
      month = String(createAt.getMonth() + 1).padStart(2, "0");
      day = String(createAt.getDate()).padStart(2, "0");
      hour = String(createAt.getHours()).padStart(2, "0");
      min = String(createAt.getMinutes()).padStart(2, "0");
      createAt =
        hour +
        " gi·ªù " +
        min +
        " ph√∫t, ng√†y " +
        day +
        " th√°ng " +
        month +
        " nƒÉm " +
        year;
      year = deadline.getFullYear();
      month = String(deadline.getMonth() + 1).padStart(2, "0");
      day = String(deadline.getDate()).padStart(2, "0");
      hour = String(deadline.getHours()).padStart(2, "0");
      min = String(deadline.getMinutes()).padStart(2, "0");
      deadline =
        hour +
        " gi·ªù " +
        min +
        " ph√∫t, ng√†y " +
        day +
        " th√°ng " +
        month +
        " nƒÉm " +
        year;
      transporter = nodemailer.createTransport({
        host: "smtp.gmail.com",
        port: 587,
        secure: false, // true for port 465, false for other ports
        auth: {
          user: "n19dccn038@student.ptithcm.edu.vn", // generated ethereal user
          pass: "fxysqktsjuembqvu", // generated ethereal password
        },
      });
      let prefixMail = "K√≠nh g·ª≠i qu√Ω kh√°ch " + name + ",";
      // send mail with defined transport object
      await transporter.sendMail({
        from: '"Firestaurant üëª"<n19dccn038@student.ptithcm.edu.vn>', // sender address
        to: `${email}`, // list of receivers
        subject: "UNPAID PRE-FEE RESERVATION", // Subject line
        text: "UNPAID PRE-FEE RESERVATION", // plain text body
        html: `<div>${prefixMail}</div>
        <div>Qu√Ω kh√°ch <span style="color:red;font-size: 14px">CH∆ØA</span> thanh to√°n ph√≠ tr·∫£ tr∆∞·ªõc y√™u c·∫ßu ƒë·∫∑t b√†n, chi ti·∫øt:</div>
        <div>Th·ªùi gian ƒë·∫∑t: ${createAt}.</div>
        <div>Th·ªùi gian di·ªÖn ra: ${schedule}.</div>
        <div>Vui l√≤ng th√†nh to√°n m·ª©c ph√≠ tr·∫£ tr∆∞·ªõc l√† <span style="color:blue;">${reservation.preFee.toLocaleString()}</span> ƒë·ªìng tr∆∞·ªõc ${deadline}. N·∫øu kh√¥ng, nh√† h√†ng s·∫Ω <span style="color:red;font-size: 14px">H·ª¶Y</span> ƒë∆°n ƒë·∫∑t b√†n n√†y</div>
        <div>C·∫£m ∆°n qu√Ω kh√°ch!</div>
        <div>Nh√† h√†ng Firestaurant.</div>
        <br>
        <div style="opacity:0.7;">
          <div>Th√¥ng tin li√™n h·ªá:</div>
          <div>L√™ M·∫≠u Anh ƒê·ª©c</div>
          <div>S·ªë ƒëi·ªán tho·∫°i: 0941***027</div>
          <div>Nh√† h√†ng Firestaurant, 97 Man Thi·ªán, P.Hi·ªáp Ph√∫, TP. Th·ªß ƒê·ª©c, TP.HCM.</div>
        </div>
        `, // html body
      });
    }
    console.log("Unpaid reservation remind successfully.");
  } catch (error) {
    console.error("Error remind unpaid reservation:", error);
  }
}

async function deleteUnpaidReservation() {
  try {
    const date = moment().format("YYYY-MM-DD HH:mm:ss");
    let reservations = await Reservation.findAll({
      where: {
        status: -2, //ch∆∞a thanh to√°n
        createAt: {
          [Op.lt]: moment().subtract(30, "minutes"),
        },
      },
      raw: true,
    });

    for (let reservation of reservations) {
      const transaction = await db.sequelize.transaction(); // B·∫Øt ƒë·∫ßu transaction
      try {
        await Table_Reservation.destroy(
          {
            where: {
              reservationId: reservation.reservationId,
            },
          },
          { transaction: transaction }
        );
        await Menu_Reservation.destroy(
          {
            where: {
              reservationId: reservation.reservationId,
            },
          },
          { transaction: transaction }
        );
        await Service_Reservation.destroy(
          {
            where: {
              reservationId: reservation.reservationId,
            },
          },
          { transaction: transaction }
        );
        await Reservation.destroy(
          {
            where: {
              reservationId: reservation.reservationId,
            },
          },
          { transaction: transaction }
        );
        await transaction.commit();
      } catch (error) {
        await transaction.rollback();
      }
    }

    console.log("Unpaid reservation deleted successfully.");
  } catch (error) {
    console.error("Error deleting unpaid reservation:", error);
  }
}

module.exports = {
  remindUnpaidReservationByEmail,
  deleteUnpaidReservation,
};
